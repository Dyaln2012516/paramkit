[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "paramkit"
version = "0.1.0"
authors = [{ name = "Dylan", email = "cgq2012516@gmail.com" }]
description = "A parameter management toolkit for Python"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
keywords = ["parameters", "configuration", "management"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12"
]
dependencies = [
  "typing-extensions >=4.0.0; python_version < '3.8'"
]

[project.optional-dependencies]
test = ["pytest>=7.0", "pytest-cov"]
dev = ["black", "flake8", "mypy"]

[project.urls]
Homepage = 'https://github.com/Dyaln2012516/paramkit'
Documentation = 'https://github.com/Dyaln2012516/paramkit/blob/main/README.md'
Issues = 'https://github.com/Dyaln2012516/paramkit/issues'

[tool.setuptools.packages.find]
where = ["."]

[tool.setuptools.package-data]
"paramkit" = ["py.typed", "*.json"]

[project.scripts]
paramkit-cli = "paramkit.cli:main"

[tool.black]
line-length = 79
target-version = ["py310"]
skip-string-normalization = true
exclude = '''
^(
    \.git
  | \.venv
  | build
  | dist
  | migrations
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 79
known_third_party = ["pytest", "django", "requests"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = false
combine_as_imports = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 79
extend-ignore = [
    "E203", # 空格相关规则冲突
    "W503", # 运算符位置
    "E501", # 行长度（由black处理）
    # 未使用导入（由pycln处理）
    "F401"]
max-complexity = 12  # 提高圈复杂度阈值
per-file-ignores = [
    "__init__.py:F401",
    # 允许测试用例的assert
    "tests/*:S101"]
exclude = [
    ".git",
    ".venv",
    "build",
    "dist",
    "migrations"]

[tool.mypy]
python_version = "3.10"
strict = true
check_untyped_defs = true
disallow_any_generics = true
warn_unused_configs = true
show_error_codes = true
ignore_missing_imports = false  # 更严格处理缺失导入
exclude = [
    "tests/.*",
    "migrations/.*"
]

[[tool.mypy.overrides]]
module = [
    "django.*",
    "sqlalchemy.*"
]
ignore_errors = true

[tool.pylint]
max-line-length = 79
max-args = 16
max-locals = 16
max-attributes = 16
good-names = [
    "id", "url", "db", "api",
    "pk", "uid", "tmp", "obj",
    "args", "kwargs"  # 添加未使用参数白名单
]
ignored-argument-names = "^(_|args|kwargs)$"  # 正则表达式需要放在主配置块
enable-all-extensions = true

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "missing-docstring",
    "too-few-public-methods",
    "import-error",
    "no-member",
    "invalid-name",
    "fixme",
    "implicit-str-concat",  # 正确使用警告符号名称
    "unused-argument"      # 正确使用警告符号名称
]

[tool.pylint.DESIGN]
max-parents = 7  # 适当放宽继承层级
min-public-methods = 1

[tool.pylint.FORMAT]
max-module-lines = 1500

[tool.pycln]
all = true
skip-imports = ["__init__"]
exclude = [
    "migrations/*",
    "legacy/*"
]

[tool.coverage.run]
branch = true
source = ["paramkit"]
omit = [
    "tests/*",
    "migrations/*",
    "**/__init__.py"
]

[tool.coverage.report]
show_missing = true
fail_under = 90

[tool.pytest.ini_options]
addopts = "--cov=paramkit --cov-report=term-missing"
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]